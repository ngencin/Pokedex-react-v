{"version":3,"sources":["helpers/format-date.ts","helpers/format-type.ts","components/pokemon-card.tsx","services/pokemon-service.tsx","pages/pokemon-list.tsx","pages/pokemon-detail.tsx","pages/page-not-found.tsx","components/pokemon-form.tsx","pages/pokemon-edit.tsx","models/pokemon.ts","pages/pokemon-add.tsx","app.tsx","index.tsx"],"names":["formatDate","date","arguments","length","undefined","Date","concat","getDate","getMonth","getFullYear","formatType","type","color","PokemonCard","_ref","pokemon","borderColor","setColor","useState","navigate","useNavigate","_jsx","className","onClick","goToPokemon","id","onMouseEnter","showBorder","onMouseLeave","hideBorder","children","_jsxs","style","src","picture","alt","name","created","types","map","PokemonService","static","Error","fetch","then","response","json","catch","error","this","handleError","data","isEmpty","method","body","JSON","stringify","headers","Object","keys","console","PokemonList","pokemons","setPokemons","useEffect","getPokemons","Link","position","bottom","right","to","PokemonsDetail","useParams","setPokemon","getPokemon","Number","width","margin","hp","cp","PageNotFound","PokemonForm","isEditForm","form","setForm","value","isValid","hasType","includes","handleInputChange","e","newField","target","isTypesValid","handleSubmit","preventDefault","validateForm","newForm","isAddForm","start","end","startsWith","endsWith","errorMsg","test","updatePokemon","addPokemon","async","onSubmit","deletePokemon","htmlFor","onChange","marginBottom","disabled","checked","selectType","filter","currentType","PokemonEdit","Pokemon","constructor","PokemonAdd","getTime","App","Router","Routes","Route","path","element","PokemonPost","PokemonDetail","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.44a8d857.chunk.js","sourcesContent":["const formatDate = (date: Date = new Date()): string => {\n    return `${date.getDate()}/${date.getMonth()+ 1}/${date.getFullYear()}`\n}\nexport default formatDate","const formatType = (type: string): string => {\n    let color: string;\n   \n    switch (type) {\n      case 'Feu': \n        color = 'red lighten-1'; \n        break; \n      case 'Eau': \n        color = 'blue lighten-1'; \n        break; \n      case 'Plante': \n        color = 'green lighten-1'; \n        break; \n      case 'Insecte': \n        color = 'brown lighten-1'; \n        break; \n      case 'Normal': \n        color = 'grey lighten-3'; \n        break; \n      case 'Vol': \n        color = 'blue lighten-3'; \n        break; \n      case 'Poison': \n        color = 'deep-purple accent-1'; \n        break; \n      case 'Fée': \n        color = 'pink lighten-4'; \n        break; \n      case 'Psy': \n        color = 'deep-purple darken-2'; \n        break; \n      case 'Electrik': \n        color = 'lime accent-1'; \n        break; \n      case 'Combat': \n        color = 'deep-orange'; \n        break; \n      default: \n        color = 'grey'; \n        break; \n    }\n   \n    return `chip ${color}`;\n  }\n\n  export default formatType","import React, { FunctionComponent, useState } from 'react';\nimport Pokemon from '../models/pokemon';\nimport './pokemon-card.css'\nimport formatDate from '../helpers/format-date';\nimport formatType from '../helpers/format-type';\nimport { useNavigate } from 'react-router-dom';\n  \ntype Props = {\n  pokemon: Pokemon,\n  borderColor?: string\n};\n  \nconst PokemonCard: FunctionComponent<Props> = ({pokemon, borderColor = '#009688'}) => {\n   \n  const [color, setColor] = useState<string>();\n  const navigate = useNavigate();\n   \n   const showBorder = () => {\n    setColor(borderColor)\n   }\n\n   const hideBorder = () => {\n    setColor('#f5f5f5') // Bordure de nouveau en grise\n   }\n\n   const goToPokemon = (id: number) => {\n    navigate(`/pokemons/${id}`);\n   }\n\n  return (\n    <div className=\"col s6 m4\" onClick={() => goToPokemon(pokemon.id)} onMouseEnter={showBorder} onMouseLeave={hideBorder}>\n      <div className=\"card horizontal\" style={{ borderColor: color }}>\n        <div className=\"card-image\"> \n          <img src={pokemon.picture} alt={pokemon.name}/>\n        </div>\n        <div className=\"card-stacked\">\n          <div className=\"card-content\">\n            <p>{pokemon.name}</p>\n            <p><small>{formatDate(pokemon.created)}</small></p>\n            {pokemon.types.map(type => (\n              <span key={type} className={formatType(type)}>{type}</span>\n            ))}\n          </div>\n        </div>\n      </div> \n    </div>\n  );\n}\n  \n\n\nexport default PokemonCard","import Pokemon from \"../models/pokemon\";\n \nexport default class PokemonService {\n  static addPokemon(pokemon: Pokemon) {\n    throw new Error('Method not implemented.');\n  }\n \n  static getPokemons(): Promise<Pokemon[]> {\n    return fetch('http://localhost:3001/pokemons')\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n  }\n \n  static getPokemon(id: number): Promise<Pokemon|null> {\n    return fetch(`http://localhost:3001/pokemons/${id}`)\n      .then(response => response.json())\n      .then(data => this.isEmpty(data) ? null : data)\n      .catch(error => this.handleError(error));\n  }\n\n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n    method: 'PUT',\n    body: JSON.stringify(pokemon),\n    headers: { 'Content-Type': 'application/json'}\n    })\n    .then(response => response.json())\n    .catch(error => this.handleError(error));\n    }\n\nstatic deletePokemon(pokemon: Pokemon): Promise<{}> {\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json'}\n    })\n    .then(response => response.json())\n    .catch(error => this.handleError(error));\n    }\n\n\n\n\n\nstatic isEmpty(data: Object): boolean {\n    return Object.keys(data).length === 0;\n}\n\n  static handleError(error: Error):void {\n    console.error(error)\n  }\n}","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport Pokemon from '../models/pokemon';\nimport PokemonCard from '../components/pokemon-card';\nimport PokemonService from '../services/pokemon-service' \nimport { Link } from 'react-router-dom';\n\nconst PokemonList: FunctionComponent = () => {\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n  \n  useEffect(() => {\n    PokemonService.getPokemons().then(pokemons => setPokemons(pokemons))\n  }, []);\n  \n  return (\n    <div>\n   \n      <h1 className=\"center\">Pokédex</h1>\n      <div className=\"container\"> \n        <div className=\"row\"> \n        {pokemons.map(pokemon => (\n          <PokemonCard key={pokemon.id} pokemon={pokemon} />\n        ))}\n        </div>\n        <Link className=\"btn-floating btn-large waves-effect waves-light red z-depth-3\"\n         style={{position: 'fixed' , bottom: '25px' , right: '25px'}} to=\"/pokemon/post\"><i className=\"fa fa-plus\"></i></Link>\n      </div>\n    </div> \n  );\n}\n  \nexport default PokemonList;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport formatDate from '../helpers/format-date';\nimport formatType from '../helpers/format-type';\nimport PokemonService from '../services/pokemon-service';\n\nconst PokemonsDetail: FunctionComponent = () => {\n  const {id} = useParams() // cet id est reçu sous forme d'une chaîne de caractères.\n  const [pokemon, setPokemon] = useState<Pokemon|undefined>();\n      \n  useEffect(() => {\n      PokemonService.getPokemon(Number(id)).then(pokemon => setPokemon(pokemon || undefined));\n      }, [id]);\n    \n  return (\n    <div>\n      { pokemon ? (\n        <div className=\"row\">\n          <div className=\"col s12 m8 offset-m2\"> \n            <h2 className=\"header center\">{ pokemon.name }</h2>\n            <div className=\"card hoverable\"> \n              <div className=\"card-image\">\n                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n              <Link to={`/pokemon/edit/${pokemon.id}`} className='btn btn-floating halfway-fab waves-effect waves-light'>\n              <i className=\"fa-solid fa-pen\"></i>\n              </Link>\n              </div>\n              <div className=\"card-stacked\">\n                <div className=\"card-content\">\n                  <table className=\"bordered striped\">\n                    <tbody>\n                      <tr> \n                        <td>Nom</td> \n                        <td><strong>{ pokemon.name }</strong></td> \n                      </tr>\n                      <tr> \n                        <td>Points de vie</td> \n                        <td><strong>{ pokemon.hp }</strong></td> \n                      </tr> \n                      <tr> \n                        <td>Dégâts</td> \n                        <td><strong>{ pokemon.cp }</strong></td> \n                      </tr> \n                      <tr> \n                        <td>Types</td> \n                        <td>\n                          {pokemon.types.map(type => (\n                           <span key={type} className={formatType(type)}>{type}</span>\n                          ))}</td> \n                      </tr> \n                      <tr> \n                        <td>Date de création</td> \n                        <td>{formatDate(pokemon.created)}</td> \n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div className=\"card-action\">\n                  <Link to=\"/\">Retour</Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <h4 className=\"center\">Aucun pokémon à afficher !</h4>\n      )}\n    </div>\n  );\n}\n  \nexport default PokemonsDetail;","import React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\n  \nconst PageNotFound: FunctionComponent = () => {\n  \n  return (\n    <div className=\"center\">\n      <img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouvée\"/>\n      <h1>Hey, cette page n'existe pas !</h1> \n      <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\n        Retourner à l'accueil\n      </Link>\n    </div>\n  );\n}\n  \nexport default PageNotFound;","import React, { FunctionComponent, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport formatType from '../helpers/format-type';\nimport PokemonService from '../services/pokemon-service';\n \n\ntype Props = {\n  pokemon: Pokemon,\n  isEditForm: boolean;\n};\n\ntype Field = {\n    value?: any,\n    error?: string,\n    isValid?: boolean;\n}\n\ntype Form = {\n    picture: Field,\n    name: Field,\n    hp: Field,\n    cp: Field,\n    types: Field\n}\n\nconst PokemonForm: FunctionComponent<Props> = ({pokemon, isEditForm}) => {\n  \n    const navigate = useNavigate();\n\n    const [form, setForm] = useState<Form>({\n        picture: {value: pokemon.picture },\n        name: { value: pokemon.name, isValid: true},\n        hp: { value: pokemon.hp, isValid: true},\n        cp: { value: pokemon.cp, isValid: true},\n        types: { value: pokemon.types, isValid: true}\n    });\n\n\n\nconst types: string[] = [\n        'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\n        'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\n      ];\n\n\nconst hasType = (type: string): boolean =>{\n    return form.types.value.includes(type);\n}\n\nconst selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\n    const checked = e.target.checked;\n    let newField: Field;\n\n    if(checked) {\n      // Si l'utilisateur coche un type, à l'ajoute à la liste des types du pokémon.\n      const newTypes: string[] = form.types.value.concat([type]);\n      newField = { value: newTypes };\n    } else {\n      // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\n      const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\n      newField = { value: newTypes };\n    }\n\n    setForm({...form, ...{ types: newField }});\n  }\n\nconst handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const fieldName: string = e.target.name;\n    const fieldValue: string = e.target.value;\n    const newField: Field = { [fieldName]: { value: fieldValue}};\n\n    setForm({...form, ...newField});\n}\n\n\nconst validateForm = () => {\n    let newForm: Form = form;\n\n    // Validator url\n    if(isAddForm()) {\n\n        const start = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\n        const end = \".png\";\n  \n        if(!form.picture.value.startsWith(start) || !form.picture.value.endsWith(end)) {\n          const errorMsg: string = 'L\\'url n\\'est pas valide.';\n          const newField: Field = { value: form.picture.value, error: errorMsg, isValid: false };\n          newForm = { ...newForm, ...{ picture: newField } };\n        } else {\n          const newField: Field = { value: form.picture.value, error: '', isValid: true };\n          newForm = { ...newForm, ...{ picture: newField } };\n        }\n      }\n    \n    // Validator name\n    if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n      const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\n      const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\n      newForm = { ...newForm, ...{ name: newField } };\n    } else {\n      const newField: Field = { value: form.name.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ name: newField } };\n    }\n\n    // Validator hp\n    if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\n      const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n      const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\n      newForm = { ...newForm, ...{ hp: newField } };\n    } else {\n      const newField: Field = { value: form.hp.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ hp: newField } };\n    }\n\n    // Validator cp\n    if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\n      const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\n      const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\n      newForm = { ...newForm, ...{ cp: newField } };\n    } else {\n      const newField: Field = { value: form.cp.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ cp: newField } };\n    }\n\n    setForm(newForm);\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n  }\n\n\n \n  const isTypesValid = (type: string): boolean => {\n    if(form.types.value.length === 1 && hasType(type)) {\n       return false;  \n    }\n   \n    if(form.types.value.length >= 3 && !hasType(type)){\n        return false;\n    }\n    return true;\n  }\n\n \n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n   const isFormValid = validateForm();\n\n   if(isFormValid){\n    pokemon.picture = form.picture.value;\n    pokemon.name = form.name.value;\n    pokemon.hp = form.hp.value;\n    pokemon.cp = form.cp.value;\n    pokemon.types = form.types.value;\n\n\n    isEditForm ? updatePokemon() : addPokemon();\n\n   }\n  }\n \n  const addPokemon = async () => {\n    const newPokemon = await PokemonService.addPokemon(pokemon);\n    return newPokemon;\n  }\n\n\n  const updatePokemon = () => {\n    PokemonService.updatePokemon(pokemon).then(() => navigate(`/pokemons/${pokemon.id}`))\n}\n\n\n  const deletePokemon = () => {\n    PokemonService.deletePokemon(pokemon).then(() => navigate(`/pokemons`))\n  }\n\n  const isAddForm = (): boolean => {\n    return !isEditForm;\n}\n\n  return (\n    <form onSubmit={e => handleSubmit(e)}> \n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\"> \n          {isEditForm && (\n            <div className='card-image'>\n            <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n            </div>\n            )}\n            <div className=\"card-image\">\n              <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n                <span className=\"btn-floating halfway-fab waves-effect waves-light\">\n                    <i onClick={deletePokemon} className=\"fa-solid fa-trash\"></i>\n                </span>\n            </div>\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Pokemon picture */}\n                {isAddForm() &&(\n                     <div className=\"form-group\">\n                  <label htmlFor=\"name\">Image</label>\n                  <input id=\"picture\" name=\"picture\" type=\"text\" className=\"form-control\" value={form.picture.value} onChange={e => handleInputChange(e)}></input>\n                {form.picture.error &&\n                <div className=\"card-pannel red accent-1\">\n                    {form.picture.error}\n                </div>\n                }\n                </div> \n                )}\n                {/* Pokemon name */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\">Nom</label>\n                  <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\n                {form.name.error &&\n                <div className=\"card-pannel red accent-1\">\n                    {form.name.error}\n                </div>\n                }\n                </div>\n                {/* Pokemon hp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"hp\">Point de vie</label>\n                  <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)}></input>\n                  {form.hp.error &&\n                <div className=\"card-pannel red accent-1\">\n                    {form.hp.error}\n                </div>\n                }\n                </div>\n                {/* Pokemon cp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"cp\">Dégâts</label>\n                  <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}></input>\n                  {form.cp.error &&\n                <div className=\"card-pannel red accent-1\">\n                    {form.cp.error}\n                </div>\n                }\n                </div>\n                {/* Pokemon types */}\n                <div className=\"form-group\">\n                  <label>Types</label>\n                  {types.map(type => (\n                    <div key={type} style={{marginBottom: '10px'}}>\n                      <label>\n                        <input id={type} type=\"checkbox\" className=\"filled-in\" value= {type} disabled={!isTypesValid(type)} checked={hasType(type)} onChange={e => selectType(type, e)}></input>\n                        <span>\n                          <p className={formatType(type)}>{ type }</p>\n                        </span>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\">Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n   \nexport default PokemonForm;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PokemonForm from '../components/pokemon-form';\nimport Pokemon from '../models/pokemon';\nimport PokemonService from '../services/pokemon-service';\n \nconst PokemonEdit: FunctionComponent = () => {\n  const {id} = useParams() // cet id est reçu sous forme d'une chaîne de caractères.\n  const [pokemon, setPokemon] = useState<Pokemon|undefined>();\n      \n  useEffect(() => {\n      PokemonService.getPokemon(Number(id)).then(pokemon => setPokemon(pokemon || undefined));\n      }, [id]);\n    \n  return (\n    <div>\n      { pokemon ? (\n        <div className=\"row\">\n            <h2 className=\"header center\">Éditer { pokemon.name }</h2>\n            <PokemonForm pokemon={pokemon} isEditForm={true}></PokemonForm>\n        </div>\n      ) : (\n        <h4 className=\"center\">Aucun pokémon à afficher !</h4>\n      )}\n    </div>\n  );\n}\n  \nexport default PokemonEdit;","export default class Pokemon {\n    // 1. Typage des propiétés d'un pokémon.\n    id: number;\n    hp: number;\n    cp: number;\n    name: string;\n    picture: string;\n    types: Array<string>;\n    created: Date;\n     \n    // 2. Définition des valeurs par défaut des propriétés d'un pokémon.\n    constructor(\n     id: number,\n     hp: number = 100,\n     cp: number = 10,\n     name: string = '...',\n     picture: string = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/xxx.png',\n     types: Array<string> = ['Normal'],\n     created: Date = new Date()\n    ) {\n     // 3. Initialisation des propiétés d'un pokémons.\n     this.id = id;\n     this.hp = hp;\n     this.cp = cp;\n     this.name = name;\n     this.picture = picture;\n     this.types = types;\n     this.created = created;\n    }\n   }","import React, { FunctionComponent, useState } from 'react';\nimport PokemonForm from '../components/pokemon-form';\nimport Pokemon from '../models/pokemon';\n\n\nconst PokemonAdd: FunctionComponent = () => {\n    const [id] = useState<number>(new Date().getTime());\n    const [pokemon] = useState<Pokemon>(new Pokemon(id));\n\n    return (\n        <div className='\"row'>\n            <h2 className='header center'>Ajouter un pokémon</h2>\n            <PokemonForm pokemon={pokemon} isEditForm={false}></PokemonForm>\n        </div>\n    )\n}\n\nexport default PokemonAdd;","import React, { FunctionComponent } from 'react';\nimport PokemonList from './pages/pokemon-list';\nimport PokemonDetail from './pages/pokemon-detail';\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\nimport PageNotFound from './pages/page-not-found';\nimport PokemonEdit from './pages/pokemon-edit';\nimport PokemonPost from './pages/pokemon-add';\n\n\nconst App: FunctionComponent = () => {\n\n\n return (\n  <Router>\n    <div>\n      {/*La barre de navigation commun à toutes les pages*/}\n      <nav>\n        <div className=\"nav-wraper teal\">\n          <Link to=\"/\" className=\"brand-logo center\">Pokédex</Link>\n        </div>\n      </nav>\n      {/*Le système de gestion des routes de notre applicaton*/}\n      <Routes>\n        <Route  path=\"/\" element={<PokemonList />} />\n        <Route  path=\"/pokemons\" element={<PokemonList />} />\n               <Route  path=\"/pokemon/post\" element={<PokemonPost />} />\n <Route  path=\"/pokemon/edit/:id\" element={<PokemonEdit />} />\n        <Route path=\"/pokemons/:id\" element={<PokemonDetail/>} />\n        <Route element={<PageNotFound />} />\n      </Routes>\n    </div>\n  </Router>\n  \n )\n}\n  \nexport default App;","import React from 'react';\nimport ReactDOM  from 'react-dom';\nimport App from './app'\n\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n    \n)"],"sourceRoot":""}